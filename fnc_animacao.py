# -*- coding: utf-8 -*-
"""Fnc_animacao.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JmMQEMnYrHT4HsslkP4MHUo7NaUdTOMh
"""

import matplotlib.animation
import matplotlib.pyplot as plt
import numpy as np
plt.rcParams["animation.html"] = "jshtml"
plt.rcParams['figure.dpi'] = 150  
plt.ioff()

fig = plt.figure()

def animate(k):
    plt.cla()
    V=186.636804778 #velocidade em m/s
    VV=86.5950813994
    VVV=50
    VVVV=28.8666936089
    VVVVV=13.397283031
    g= 9.8 #gravidade m/s²
    t = 0.1*k
    angle = np.pi/12
    #while angle < np.pi/2:
      #X=V*np.cos(angle)*t
      #y=V*np.sin(angle)*t+(0.5*-9.8*t**2)
    plt.scatter(V*np.cos(np.deg2rad(angle))*t, V*np.sin(np.deg2rad(angle))*t+(0.5*-9.8*t**2)) # lançamento em 15°
    plt.scatter(VV*np.cos(np.deg2rad(angle))*t, VV*np.sin(np.deg2rad(angle))*t+(0.5*-9.8*t**2)) # lançamento em 30°
    plt.scatter(VVV*np.cos(np.deg2rad(angle))*t, VVV*np.sin(np.deg2rad(angle))*t+(0.5*-9.8*t**2)) # lançamento em 45°
    plt.scatter(VVVV*np.cos(np.deg2rad(angle))*t, VVVV*np.sin(np.deg2rad(angle))*t+(0.5*-9.8*t**2)) # lançamento em 60°
    plt.scatter(VVVVV*np.cos(np.deg2rad(angle))*t, VVVVV*np.sin(np.deg2rad(angle))*t+(0.5*-9.8*t**2)) # lançamento em 75°
    plt.xlim(0,170)
    plt.ylim(0,80)

anim = matplotlib.animation.FuncAnimation(fig, animate, frames=100, interval=10)

# to save the animation, uncomment the following three lines
f = r"Animacao.mp4" 
writervideo = matplotlib.animation.FFMpegWriter(fps=60) 
anim.save(f, writer=writervideo,dpi =150)